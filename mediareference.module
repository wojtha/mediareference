<?php
// $Id: $

/**
 * @file
 * Defines a widget for referencing media content from another. With multiple
 * select a multiple upload features and AJAX interface.
 *
 * IMPORTANT! Javascript for admin UI is needed!
 *
 * @author
 * Vojtech Kusy <wojtha@gmail.com>, http://vojtechkusy.com
 *
 */

//=========================================
//  CONFIGURATION
//=========================================

// Field is disabled
define('MEDIAREF_FIELD_DISABLED', 0);

// Field is allowed but not required
define('MEDIAREF_FIELD_OPTIONAL', 1);

// Field is required
define('MEDIAREF_FIELD_REQUIRED', 2);

// Default Imagecache preset
define('MEDIAREF_IMAGECACHE_THUMB_PROFILE', 'mediareference_thumbs');

//=========================================
//    DRUPAL HOOKS
//=========================================

/**
 * Implementation of hook_init()
 */
function mediareference_init() {
  module_load_include('inc', 'mediareference', 'includes/mediareference.field');
  module_load_include('inc', 'mediareference', 'includes/mediareference.widget');

  // Insert support
  if (module_exists('insert')) {
    module_load_include('inc', 'mediareference', 'includes/mediareference.insert');
  }

  if (!empty($_REQUEST['lightframe'])) {
    mediareference_lightframe_child_js();
  }
}

/**
 * Implementation of hook_menu().
 */
function mediareference_menu() {
  $items = array();

  // arguments: type/field/id/action
  $items['mediareference_js/%/%/%/%'] = array(
    'title' => 'Mediareference Ahah Controller' ,
    'page callback' => 'mediareference_widget_js',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'mediareference.widget.inc',
    'file path' => drupal_get_path('module', 'mediareference') .'/includes',
  );
  $items['mediabrowser/%/%'] = array(
    'title' => 'Mediabrowser',
    'page arguments' => array(1, 2),
    'page callback' => 'mediareference_browser',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['lightframe/close'] = array(
    'title' => 'Close Lightframe',
    'page callback' => 'mediareference_lightframe_close_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function mediareference_form_alter(&$form, $form_state, $form_id) {
  // Here we simply want to install a form after_build callback.
  if (!empty($_REQUEST['lightframe'])) {
    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
    $form['#after_build'][] = 'mediareference_lightframe_form_after_build';
  }

  // Modify CCK field/settings page
  if ($form_id === 'content_field_edit_form') {
    unset($form['field']['advanced']);
  }

  /*if ($form_id == 'views_exposed_form') {
    $form['filters'] = array(
      '#type' => 'fieldset',
      '#title' => 'Filters',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    foreach ($form as $key => $element) {
      if ($key{0} === '#' || in_array($key, array('form_id', 'form_build_id', 'form_token', 'filters'))) {
        continue;
      }
      $form['filters'][$key] = $element;
      unset($form[$key]);
    }
  }*/

}

function mediareference_lightframe_form_after_build($form, &$form_state) {
  mediareference_lightframe_child_js();
  return $form;
}

/**
* Implementation of hook_theme().
*/
function mediareference_theme() {
  return array(
    // Theme for the widget.
    'mediareference_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'mediareference.theme.inc',
      'path' => drupal_get_path('module', 'mediareference') .'/includes',
    ),
    // Theme for the default field formatter
    'mediareference_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'file' => 'mediareference.theme.inc',
      'path' => drupal_get_path('module', 'mediareference') .'/includes',
    ),

  );
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function mediareference_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page']) && isset($theme_registry['page']['theme paths'])) {
    $module_path = drupal_get_path('module', 'mediareference');
    array_unshift($theme_registry['page']['theme paths'], $module_path);
    array_unshift($theme_registry['page']['preprocess functions'], 'mediareference_pre_preprocess_page');
  }
}

//=====================================
//   VIEWS AND IMAGECACHE HOOKS
//=====================================

/**
 * Implementation of hook_imagecache_default_presets()
 */
function mediareference_imagecache_default_presets() {
  $presets = array();
  $presets['mediareference_thumbs'] = array(
    'presetname' => 'mediareference_thumbs',
    'actions' => array(
      0 => array(
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale_and_crop',
        'data' => array(
          'width' => '90',
          'height' => '90'
        )
      )
    )
  );
  return $presets;
}

/*
 * Implementation of hook_views_default_views()
 */
function mediareference_views_default_views() {
  $views = array();
  $view = null;

  $file = './'. drupal_get_path('module', 'mediareference') . '/includes/mediabrowser.view.inc';
  ob_start();
  include $file;
  ob_end_clean();

  if (isset($view)) {
    $views[$view->name] = $view;
  }
  else {
    watchdog('mediareference', "Can't load default mediabrowser view.", array(), WATCHDOG_ERROR);
  }

  return $views;
}

//=====================================
//   MENU CALLBACKS
//=====================================

function mediareference_browser($type_name, $field_name) {
  $output = '';

  // load the field definition and check if arguments from url is right
  $field = content_fields($field_name, $type_name);
  if (empty($type_name) || empty($field_name) || empty($field)) {
    return drupal_not_found();
  }

  // check access
  if (!user_access("create $type_name content")) {
    return drupal_access_denied();
  }

  mediareference_lightframe_child_js();
  $referenceable_types = array_filter($field['referenceable_types']);
  $destination = drupal_get_destination();

  $display_id = 'default';
  $view = views_get_view('mediabrowser');
  $view->override_path = $_GET['q'];
  $view->is_cacheable = FALSE;

  $add_content = '';
  $glue = '';
  foreach ($referenceable_types as $type) {
    if (user_access("create $type content")) {
      $add_content .= $glue . l(t('add @type', array('@type' => $type)), 'node/add/'. str_replace('_', '-', $type), array('query' => $destination));
      $glue = ', ';
    }
  }

  if ($add_content && isset($view->display[$display_id]->display_options['header'])) {
    $view->display[$display_id]->display_options['header'] = '<strong>'. t('Add new content') . ':</strong> ' . $add_content .'</div>';
  }

  // modify all node type filters, allow only node types set in nodereference CCK settings
  $node_type_filters_count = 0;
  if (isset($view->display[$display_id]->display_options['filters'])) {
    foreach ($view->display[$display_id]->display_options['filters'] as $filter_type => &$filter) {
      if (preg_match('/^type(_\d+)?$/', $filter_type) && $filter['table'] == 'node') {
        $filter['value'] = $referenceable_types;
        $node_type_filters_count++;
      }
    }
  }

  // add node type filter if doesn't exists
  if ($node_type_filters_count == 0) {
    $options = array(
      'operator' => 'in',
      'value' => $referenceable_types,
      'group' => '0',
      'exposed' => FALSE,
      'expose' => array(
        'operator' => FALSE,
        'label' => '',
      ),
      'relationship' => 'none',
    );
    $view->add_item($display_id, 'filter', 'node', 'type', $options);
  }

  //vsm($view);

  // Prepare display for render
  $view->set_display($display_id);

  // Get the results.
  $output .= $view->preview();

  return $output;
}

//=====================================
//   VIEW EMBED FORM
//=====================================

/**
 * Implementation of hook_views_embed_form().
 */
function mediareference_views_embed_form() {
  return array(
    'mediareference_attach_form' => t('Attach reference to content'),
  );
}

/**
 * Views embed form - "Attach" button
 */
function mediareference_attach_form(&$form_state, $fields) {
  $form = array();

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => intval($fields->nid)
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Attach'
  );

  return $form;
}

/**
 * Views embed form submit handler - "Add to context" button
 */
function mediareference_attach_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['values']['submit']) {
    mediareference_lightframe_close($form_state, array('nid' => $form_state['values']['nid']));
  }
}


//=====================================
//   HELPERS
//=====================================

/**
 * Filter children delta elements
 *
 * @param array $element
 * @param bool $attributes
 * @return
 * element children (delta items)
 */
function mediareference_filter_children(&$element, $attributes = FALSE) {
  $children = array();

  if (is_array($element) && count($element)) {
    foreach ($element as $key => $value) {
      if (is_numeric($key) || (strpos($key, '#') == 0 && $attributes)) {
        $children[$key] = $value;
      }
    }
  }

  return $children;
}

/**
 * Setter and getter for AHAH callback switch. This is emulation of a global variable
 * which tell us if the current proccessed request is AHAH or not.
 *
 * @param boolean $set
 *    Set AHAH callback value
 *
 * @return boolean
 *    Returns stored AHAH value, default is FALSE
 */
function mediareference_is_ahah_request($set = NULL) {
  static $ahah = FALSE;

  if (!is_null($set)) {
    $ahah = (bool) $set;
  }

  return $ahah;
}

//=====================================
//   LIGHTFRAME MINI API
//=====================================

/**
 * Add javascript and stylesheets to the child page.
 */
function mediareference_lightframe_child_js() {
  static $processed = FALSE;
  // Make sure external resources are not included more than once.
  if ($processed) {
    return;
  }
  $processed = TRUE;

  // Disable admin_menu, admin module output and similar modules, which
  // is something child windows don't need.
  module_invoke_all('suppress');

  if (module_exists('onbeforeunload')) {
    onbeforeunload_add_js();
  }

  $module_path = drupal_get_path('module', 'mediareference');
  drupal_add_css($module_path .'/includes/mediareference.css');
  drupal_add_js($module_path .'/includes/mediareference.js');

  // Tell Drupal's theme system to use the Modal Frame template.
  $GLOBALS['lightframe_page_template'] = TRUE;

  drupal_add_js(array('mediareference' =>  array('lightframize' => 1)), 'setting');
}

/**
 * Close lightframe modal.
 *
 * @param $args
 *   An optional array of arguments that will be forwarded to the client
 *   side onSubmit callback.
 */
function mediareference_lightframe_close(&$form_state, $args = array()) {
  $form_state['redirect'] = 'lightframe/close';
  $_SESSION['lightframe'] = $args;
}

/**
 * Close lightframe modal menu callback.
 */
function mediareference_lightframe_close_callback() {
  mediareference_lightframe_child_js();
  drupal_add_js('parent.LightframeUpdate();parent.Lightbox.end("forceClose");', 'inline');
  return '';
}

/**
 * Preprocess template variables for page.tpl.php - step 1.
 *
 * Performance enhancement: prevent template_preprocess_page() from generating
 * sidebar blocks when a modal frame has been requested.
 */
function mediareference_pre_preprocess_page(&$variables) {
  if (!empty($GLOBALS['lightframe_page_template'])) {
    $variables['show_blocks'] = FALSE;
  }
}

/**
 * Preprocess template variables for page.tpl.php - step 2.
 */
function mediareference_preprocess_page(&$variables) {
  if (!empty($GLOBALS['lightframe_page_template'])) {
    if (!isset($variables['template_files'])) {
      $variables['template_files'] = array();
    }
    $variables['template_files'][] = 'lightframe-page';

    // see drupal_goto()
    $url = '';
    if (!empty($_REQUEST['destination'])) {
      $url = extract(parse_url(urldecode($_REQUEST['destination'])));
      $url = url($path, array('query' => $query, 'fragment' => $fragment, 'absolute' => TRUE));
      // Remove newlines from the URL to avoid header injection attacks.
      $url = str_replace(array("\n", "\r"), '', $url);
    }

    $variables['navigate_back_url'] = $url;
  }
}

